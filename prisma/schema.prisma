// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products      Product[]
  categories    Category[]
  subcategories Subcategory[]
  cart          Cart?
  Order         Order[]
  Address       Address[]
}

enum Role {
  USER
  ADMIN
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  description   String?
  subcategories Subcategory[] // 1-to-many relationship
  createdById   String
  createdBy     User          @relation(fields: [createdById], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subcategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, categoryId]) // Prevent duplicate subcategory names under same category
}

model Product {
  id            String      @id @default(uuid())
  name          String
  description   String?
  price         Float
  stock         Int
  images        String[]
  subcategoryId String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  cartItems     CartItem[]
  sales         Int         @default(0)

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]

  @@unique([name, subcategoryId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  price     Float
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId]) // 1 product per cart
}

model Order {
  id                String      @id @default(uuid())
  user              User        @relation(fields: [userId], references: [id])
  userId            String
  totalAmount       Float
  discount          Float       @default(0)
  couponCode        String? // save for reference
  status            OrderStatus @default(PENDING)
  createdAt         DateTime    @default(now())
  orderItems        OrderItem[]
  shippingAddress   Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress    Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  String?

  updatedAt DateTime @updatedAt
  Coupon    Coupon?  @relation(fields: [couponId], references: [id])
  couponId  String?
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Address {
  id             String      @id @default(uuid())
  user           User        @relation(fields: [userId], references: [id])
  userId         String
  type           AddressType
  fullName       String
  phone          String
  street         String
  city           String
  state          String
  postalCode     String
  country        String
  isDefault      Boolean     @default(false)
  shippingOrders Order[]     @relation("ShippingAddress")
  billingOrders  Order[]     @relation("BillingAddress")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum AddressType {
  SHIPPING
  BILLING
}

model Coupon {
  id         String   @id @default(uuid())
  code       String   @unique
  discount   Int // fixed amount discount
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orders Order[] // Relation to orders that used this coupon
}
